//---------------------Please refer to the textbook for first 21 instructions---------------------------------------//

lb:   000001100000_00000_000_01010_0000011  => 06000503		//Load byte stored in [96] (=7) into r10 
Addi: 000000000111_01010_000_01010_0010011  => 00750513		//Add 7 to r10 (7+7=14)
sw    0001000_01010_00000_010_00000_0100011 => 10A02023		//store r10 in [256]

Addi: 101011110011_00000_000_01011_0010011  => AF300593		//Add 0xFFFFFAF3 to r11
ori:  111101111100_01011_110_01100_0010011  => F7C5E613		//r12 = r11 | 0xFFFFFF7C = 0xFFFFFFFF
andi: 111101111100_01011_111_01101_0010011  => F7C5F693		//r13 = r11 & 0xFFFFFF7C = 0xFFFFFA70
xor:  0000000_01011_01100_100_01110_0110011 => 00B64733		//r14 = r12 ^ r11 = 0x50C

sll:  0000000_01101_01110_001_01111_0110011 => 00D717B3		//r15 = r14 << r13[4:0] = 0x50C0000
sltu: 0000000_01110_01101_011_10000_0110011 => 00E6B833 	//r16 = (r13 < r14) = (0x590 < 0x50C) = 0
xori: 010000010010_01111_100_10001_0010011  => 4127C893		//r17 = 0x412 ^ r15 = 50c0412
srl:  0000000_10001_01101_101_10010_0110011 => 0116D933		//r18 = r13 >> r17[4:0] = 0x3FFF

sw:   0000000_01111_00000_010_00000_0100011 => F02023		//Store content of r15 (0x50C0000) in [0]